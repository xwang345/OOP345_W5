Script started on Fri 13 Oct 2017 10:13:51 AM EDT
xwang345@matrix:~/OOP345/OOP345_W5> whoami
xwang345
xwang345@matrix:~/OOP345/OOP345_W5> cat w5.cpp Notifications.* Message.*
// Workshop 5 - Containers
// w5.cpp

#include <iostream>
#include <fstream>
#include "Message.h"
#include "Notifications.h"

const char REC_DELIMITER = '\n';

w5::Notifications collect(std::ifstream& in, char recDelim) {
    w5::Notifications notifications;

    do {
        w5::Message message(in, recDelim);
        if (!message.empty())
            notifications += std::move(message);
    } while (in);

    return notifications;
}

int main(int argc, char* argv[]) {
    if (argc == 1) {
        std::cerr << argv[0] << ": missing file operand\n";
        return 1;
    }
    else if (argc != 2) {
        std::cerr << argv[0] << ": too many arguments\n";
        return 2;
    }
    std::ifstream file(argv[1]);
    if (!file) {
        std::cerr << argv[0] << "\n: Failed to open " << argv[1] << "\n";
        return 3;
    }

    std::cout << "\nNotifications\n=============\n\n";
    w5::Notifications notifications = collect(file, REC_DELIMITER);

    notifications.display(std::cout);

    std::cout << "Press any key to continue ... ";
    std::cin.get();
}#include <fstream>
#include <iostream>
#include <string>
#include "Notifications.h"
using namespace w5;

Notifications::Notifications()
        : messageTable(nullptr), messageCount(0) {
}

Notifications::Notifications(const Notifications& rhs)  // copy constructor
        : messageTable(nullptr), messageCount(0) {
    messageCount = rhs.messageCount;
    if (rhs.messageTable) {
        // deep copy
        for (int i = 0; i < messageCount; i++)
            messageTable[i] = rhs.messageTable[i];
    }
}

Notifications& Notifications::operator=(const Notifications& rhs) { // copy assignment
    if (this != &rhs)
        delete[] messageTable;

    if (rhs.messageTable) {
        //deep copy
        for (int i = 0; i < messageCount; i++)
            messageTable[i] = rhs.messageTable[i];
    }

    return *this;
}

Notifications::Notifications(Notifications&& rhs)
        : messageTable(nullptr), messageCount(0) { // move constructor
    rhs.messageTable = nullptr; // make rhs a 'zombie'
    rhs.messageTable = 0;
}

Notifications&& Notifications::operator=(Notifications&& rhs) { // move assignment
    if (this != &rhs) {
        delete[] messageTable; // delete our 'braisn' (if we have any)

        // steal 'brains'
        messageTable = rhs.messageTable;
        messageCount = rhs.messageCount;

        //make rhs a 'zombie'
        rhs.messageTable = nullptr;
        rhs.messageCount = 0;
    }
    return std::move(*this);
}

Notifications::~Notifications() {
    delete[] messageTable;
}

void Notifications::operator+=(const Message& msg) { // adds msg to the set
    if (messageTable == nullptr)
        messageTable = new Message[MAX_SIZE];
    if (messageCount < MAX_SIZE) {
        messageTable[messageCount] = msg;
        messageCount++;
    }
}

void Notifications::display(std::ostream& os) const { // insert the Message objects to the os output stream
    for (int i = 0; i < messageCount; i++)
        messageTable[i].display(os);
}#pragma once
#include "Message.h"

namespace w5 {
    const int MAX_SIZE = 10;
    class Notifications {
        Message* messageTable;
        int      messageCount;
    public:
        Notifications();
        Notifications(const Notifications& rhs);
        Notifications& operator=(const Notifications& rhs);
        Notifications(Notifications&& rhs);
        Notifications&& operator=(Notifications&& rhs);
        ~Notifications();
        void operator+=(const Message& msg);
        void display(std::ostream& os) const;
    };
}#include <fstream>
#include <iostream>
#include <string>
#include "Message.h"
using namespace w5;

Message::Message() {
}

Message::Message(std::ifstream& in, char c) {
    // constructor retrieves a record from the in file object,
    // parses the record ( asdescribed above) a? ts components in the Message object.
    // c is the character that delimits each record
    std::string line;
    getline(in, line, c);
    auto cr = line.find('\r');
    if (cr != std::string::npos)
        line.erase(cr);
    //std::cout << "line-->" << line << "<--\n";

    size_t index = 0;

    while (index < line.size()) {
        if (line[index] == ' ') break;
        name += line[index];
        index++;
    }
    //std::cout << "name = '" << name << "'\n";

    index++;

    if (index < line.size() && line[index] == '@') {
        index++;
        while (index < line.size()) {
            if (line[index] == ' ') break;
            reply += line[index];
            index++;
        }
        //std::cout << "reply = '" << reply << "'\n";
        index++;
    }
    while (index < line.size()) {
        tweet += line[index];
        index++;
    }
    //std::cout << "tweet = '" << tweet << "'\n";
}

bool Message::empty() const {
    return tweet.empty();
}

void Message::display(std::ostream& os) const {
	os.clear();
    os << "Message" << std::endl;
    os << " User  : " << name << std::endl;
    if (reply != "") {
        os << " Reply : " << reply << std::endl;
    }
    os << " Tweet : " << tweet << '\r';
    os << '\n' << '\n';
}
#pragma once
#include <iostream>

namespace w5 {
    class Message{
        std::string name, reply, tweet;

    public:
        Message();
        Message(std::ifstream& in, char c);
        bool empty() const;
        void display(std::ostream& os) const;
    };
}xwang345@matrix:~/OOP345/OOP345_W5> g++ -o w5 -std=c++0x w5.cpp Notifications.cpp Message.cpp
xwang345@matrix:~/OOP345/OOP345_W5> w5 w5_test.dat

Notifications
=============

Message
 User  : jim
 Tweet : Workshop 5 is cool

Message
 User  : harry
 Reply : jim
 Tweet : working on workshop 5 now

Message
 User  : dave
 Tweet : what the ^#$%!

Message
 User  : john
 Reply : harry
 Tweet : I'm done

Press any key to continue ... 
xwang345@matrix:~/OOP345/OOP345_W5> exit
exit

Script done on Fri 13 Oct 2017 10:14:26 AM EDT
